{"meta":{"title":"퇴근후서버다운, 그건일","subtitle":"곧사십","description":"퇴근후서버다운, 그건일","author":"그건일","url":"http://thisisone.github.io"},"pages":[{"title":"about","date":"2019-02-03T04:21:27.000Z","updated":"2019-09-01T12:33:22.362Z","comments":true,"path":"about/index.html","permalink":"http://thisisone.github.io/about/index.html","excerpt":"","text":"always test 윈터이즈커밍"},{"title":"categories","date":"2019-02-14T12:29:52.000Z","updated":"2019-09-01T12:33:21.889Z","comments":true,"path":"categories/index.html","permalink":"http://thisisone.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-02-14T12:29:42.000Z","updated":"2019-09-01T12:33:21.858Z","comments":true,"path":"tags/index.html","permalink":"http://thisisone.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"gvim 사용해보기","slug":"gvim","date":"2020-02-08T17:44:49.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"gvim/","link":"","permalink":"http://thisisone.github.io/gvim/","excerpt":"","text":"hyper.is 나 커맨드 창을 많이 쓰니까에디터가 필요해서 찾아보다 gvim 이 있군요 (검은 화면의 에디터) utf-8 파일을 표시 못해서 설정방법을 찾았습니다.그런데 이렇게 셋팅하면 euc-kr 가 깨져보입니다. 설정파일: C:\\Program Files (x86)\\Vim_vimrc 제일 마지막에 써줍니다. 1234set tenc=koreaset enc=utf8set langmenu=nonelang en 출처: 설치페이지https://www.vim.org/download.php) utf-8문제해결책","categories":[],"tags":[]},{"title":"hexo 에서 github 으로 deploy 할때 암호 입력 없이 진행하는법","slug":"hexo-deploy-github-nopassword","date":"2020-02-08T16:34:22.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"hexo-deploy-github-nopassword/","link":"","permalink":"http://thisisone.github.io/hexo-deploy-github-nopassword/","excerpt":"","text":"참고 링크: https://soulsearcher.github.io/2019/08/09/hexo-deploy-failed/ 참고 링크는 이중인증에 대한 내용이지만이중인증과 상관없이 사용가능하다.암호 매번 입력하는것도 번거럽고 ssh key 만들기git 깔고git bash 를 이용했다. 1ssh-keygen -t rsa -b 4096 이러면 .ssh 폴더와id_rsaid_rsa.pub가 생긴다. ssh config 추가내가할땐 UseKeychain yes 부분이 문제가 되서 주석처리했다. 1234Host * AddKeysToAgent yes #UseKeychain yes IdentityFile ~/.ssh/id_rsa github 에 ssh key 등록하기우측 상단 의 프로필 아이콘 -&gt; Settings -&gt; SSH And ~~ -&gt; SSH 키 등록 id_rsa.pub 내용을 복분한다. 암호 없는 ssh 확인id 도 쓸필요 없이 연결해본다.1234ssh -T git@github.com결과:Hi [내ID]! You&apos;ve successfully authenticated, but GitHub does not provide shell access. github 는 ssh 명령을 던지지 못하게 막혀있지만접속자가 누구인지 인지하면 성공 hexo 의 _config.yml 수정기존의 https://github~~ 주소가 아니고git@ 로 시작한다.마지막은 .git 으로 끝난다.123deploy: type: git repo: git@github.com:~~~.git hexo 로 배포해보자암호없이 잘 넘어가면 성공","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://thisisone.github.io/tags/hexo/"}]},{"title":"node.js 에서 tcp 서버 샘플","slug":"nodejs-tcp-server-sample","date":"2020-02-08T15:25:42.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"nodejs-tcp-server-sample/","link":"","permalink":"http://thisisone.github.io/nodejs-tcp-server-sample/","excerpt":"","text":"샘플을 발견하였는데필요한 대부분의 이벤트가 잘들어가 있었으며세션 별로 setTimeout 를 걸수 있었어서 편리했다. 빨리 만들어야 해서 for 문돌면서 글자 합쳐 주는 부분이 있는데효율은 잘 모르겠다. telnet 으로 테스트 정도는 할 수 있었다.npm 으로 별다른 설치를 하지않아도 되서 좋다.. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889var net = require('net');var server = net.createServer(function (client) &#123; console.log('연결됨'); client.setTimeout(10000); // 주기적으로 업데이트 가능 client.recv = ''; // 받기 버퍼 같은 용도 json 통신을 할예정 client.on('data', function (data) &#123; // json 통신을 파싱합니다. var text = data.toString(); for (var i = 0; i &lt; text.length; i++) &#123; if (text[i] === '\\r') continue; if (text[i] !== '\\n') &#123; client.recv += text[i]; continue; &#125; var req_text = client.recv; client.recv = ''; var jreq = jsonParsing(req_text); if (jreq === null) &#123; console.error(\"json 파싱 실패\", req_text); continue; &#125; if (jreq.api == 'hello') &#123; // 응답도 json var data = &#123; api: jreq.api, code: 100, message: 'hello2' &#125;; writeData(client, data); &#125; else &#123; console.error('처리되지 않은 api', jreq.api); var data = &#123; api: jreq.api, code: -1, message: 'api fail', &#125;; writeData(client, data); &#125; &#125; &#125;); client.on('end', function () &#123; console.log('연결이 끊겼다.'); server.getConnections(function (err, count) &#123; console.log('남은 연결 가능수:', count); &#125;); &#125;); client.on('error', function (err) &#123; console.error('소켓 에러r:', err); &#125;); client.on('timeout', function () &#123; console.error('소켓 타이머 이벤트'); client.destroy(); &#125;);&#125;);server.listen(8000, function () &#123; console.log('서버 시작합니다.', server.address()); server.on('close', function () &#123; console.log('서버 종료합니다.'); &#125;); server.on('error', function (err) &#123; console.log('서버 에러:', err); &#125;);&#125;);function writeData(socket, data) &#123; var data2 = JSON.stringify(data) + \"\\r\\n\"; socket.write(data2);&#125;function jsonParsing(data) &#123; try &#123; return JSON.parse(data); &#125; catch &#123; return null; &#125;&#125; cafe24 에 웹서버포트를 tcp 로 돌리려고 했는데웹통신이 아니면 통신 못하도록 막혀있는거 같다..","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://thisisone.github.io/tags/node-js/"},{"name":"tcp","slug":"tcp","permalink":"http://thisisone.github.io/tags/tcp/"},{"name":"server","slug":"server","permalink":"http://thisisone.github.io/tags/server/"}]},{"title":"node.js 에서 뭔가 실행하기","slug":"nodesj-process-execute","date":"2020-02-08T06:32:07.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"nodesj-process-execute/","link":"","permalink":"http://thisisone.github.io/nodesj-process-execute/","excerpt":"","text":"test.bat 를 실행하는 코드 12345var exec = require('child_process').exec;var child = exec(\"test.bat\", function (error, stdout, stderr) &#123; // error !== null 알 수 있다. console.log(\"exec end\", stdout, stderr, error);&#125;); npm 설치 없이도 되는거 같다.윈도우즈에서는 stdout, stderr, error 가 글자가깨져서 보이는데…","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://thisisone.github.io/tags/node-js/"}]},{"title":"프로필 사진을 그려보았다","slug":"draw-profile-image","date":"2019-09-08T05:08:40.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"draw-profile-image/","link":"","permalink":"http://thisisone.github.io/draw-profile-image/","excerpt":"","text":"유튜브를 해야하기때문에 날림으로채널도 만들고 프로필사진도 만들었다. 원본은 DATADOG 의 로그를 보고 그림판으로 그린거임 DATADOG 의 로고 내가그린거 (채널용) 내가그린거 (내 계정용) 그런데..구글계정에서 프로필 사진을 올렸지만 곧바로 적용이 안되는지 옛날 사진이 자꾸 나온다.","categories":[],"tags":[{"name":"youtube","slug":"youtube","permalink":"http://thisisone.github.io/tags/youtube/"}]},{"title":"거북목 교정 운동","slug":"neck-stretching","date":"2019-09-04T13:51:47.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"neck-stretching/","link":"","permalink":"http://thisisone.github.io/neck-stretching/","excerpt":"","text":"으앗","categories":[],"tags":[{"name":"운동","slug":"운동","permalink":"http://thisisone.github.io/tags/운동/"}]},{"title":"c# 에서 문자열 연산의 성능 문제","slug":"csharp-string-append-and-format-diff","date":"2019-09-03T15:30:12.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"csharp-string-append-and-format-diff/","link":"","permalink":"http://thisisone.github.io/csharp-string-append-and-format-diff/","excerpt":"","text":"유니티에서 로그를 on / off 시키는걸 만들려다 우연히 테스트 해보았는데 꽤 충젹적인 결과가 나와서 공유 해봅니다. 12345// 1번. 더한다Debug.Log(&quot;abc&quot;+&quot;def&quot;);// 2번. string.format() 형태로 쓴다.Debug.Log(&quot;&#123;0&#125;&#123;1&#125;&quot;, &quot;abc&quot;, &quot;def&quot;); 로그를 끄는 걸 가정하고 위 고드는 그대로 배포 된다면문자열 연산이 일어나지 않나 해서 2번이 더 좋을것 같았다. 성능을 측정123456abc= 1ms // 안 더한다.abc+def= 1ms // 한번 더한다.abc+def+ghi= 1ms // 두번 더한다.format:abcdef= 3ms // string format, params object[] args 를 첫번째 인자만 썼다.format:[0],abcdef= 10ms // 두번째 인자 까지 썼다.format:[0][1],abcdef,ghi= 19ms // 세번째 인자 까지 썼다. 맙소사테스트코드 공유해봅니다. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192using System;using System.Collections;using System.Collections.Generic;using UnityEngine;public class FirstScene : MonoBehaviour&#123; void Update() &#123; if(Input.GetKeyDown(KeyCode.Space)) &#123; int count = 100000; var sw = new System.Diagnostics.Stopwatch(); sw.Start(); for(int i=0; i&lt; count; i++) &#123; LogTest1(\"abc\"); &#125; sw.Stop(); var test1 = sw.ElapsedMilliseconds; sw.Reset(); sw.Start(); for (int i = 0; i &lt; count; i++) &#123; LogTest1(\"abc\" + \"def\"); &#125; sw.Stop(); var test11 = sw.ElapsedMilliseconds; sw.Reset(); sw.Start(); for (int i = 0; i &lt; count; i++) &#123; LogTest1(\"abc\" + \"def\" + \"ghi\"); &#125; sw.Stop(); var test111 = sw.ElapsedMilliseconds; sw.Reset(); sw.Start(); for (int i = 0; i &lt; count; i++) &#123; LogTest2(\"abcdef\"); &#125; sw.Stop(); var test2 = sw.ElapsedMilliseconds; sw.Reset(); sw.Start(); for (int i = 0; i &lt; count; i++) &#123; LogTest2(\"&#123;0&#125;\", \"abcdef\"); &#125; sw.Stop(); var test22 = sw.ElapsedMilliseconds; sw.Reset(); sw.Start(); for (int i = 0; i &lt; count; i++) &#123; LogTest2(\"&#123;0&#125;&#123;1&#125;\", \"abcdef\", \"ghi\"); &#125; sw.Stop(); var test222 = sw.ElapsedMilliseconds; string s = \"\"; s += string.Format(\"abc= &#123;0&#125;ms\\n\", test1); s += string.Format(\"abc+def= &#123;0&#125;ms\\n\", test11); s += string.Format(\"abc+def+ghi= &#123;0&#125;ms\\n\", test111); s += string.Format(\"format:abcdef= &#123;0&#125;ms\\n\", test2); s += string.Format(\"format:[0],abcdef= &#123;0&#125;ms\\n\", test22); s += string.Format(\"format:[0][1],abcdef,ghi= &#123;0&#125;ms\\n\", test222); Debug.Log(s); &#125; &#125; void LogTest1(string msg) &#123; &#125; void LogTest2(string format, params object[] args) &#123; &#125;&#125; 추가로Unity 에서는 쓸 수 없지만dotnet core 에서 아래와 같이 쓰는 기능이 있던데 1Log($\"&#123;arg[0]&#125;&#123;arg[1]&#125;\"); 이게 속도가 제일 빨랐다.","categories":[],"tags":[{"name":"c#","slug":"c","permalink":"http://thisisone.github.io/tags/c/"}]},{"title":"hexo 셋팅 방법","slug":"hexo-setting","date":"2019-09-01T13:36:56.000Z","updated":"2020-02-08T18:19:07.881Z","comments":true,"path":"hexo-setting/","link":"","permalink":"http://thisisone.github.io/hexo-setting/","excerpt":"","text":"한번하면 까먹고 검색하고 또 까먹고 해서 기록해둡니다. 참고 링크 설치법 마크다운요약 설치할때nas 에서 blog 를 받는다. windows 를 새로 설치했다면 hxeo-cli 설치1npm install -g hexo-cli 다음 명령어 실행1npm install 작업할때사이트 띄우기1hexo serve 새로운 포스트1hexo new post 파일명 업로드 방법배포 플러그인 설치1npm install --save hexo-deployer-git 변경점 업데이트 문제가 생긴다면 이거 해주고1hexo clean 올릴때는 보통 이렇게12hexo cleanhexo deploy 링크 마크다운 github 암호 없이 업로드 autolink 플러그인 설명","categories":[],"tags":[]},{"title":"웹 크롤링 해보기","slug":"web_crawler","date":"2019-02-18T16:02:45.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"web_crawler/","link":"","permalink":"http://thisisone.github.io/web_crawler/","excerpt":"","text":"node.js phantom 을 사용 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/*jshint esversion: 6 */const URL = \"http://search.danawa.com/dsearch.php?k1=ddr4&amp;module=goods&amp;act=dispMain\";const phantom = require('phantom');var path = require('path');(async function() &#123; const instance = await phantom.create(); const page = await instance.createPage(); await page.on('onResourceRequested', function(requestData) &#123; /* var ext = path.extname(requestData.url); if(ext == '.png' || ext == '.gif' || ext == '.jpeg') &#123; return; &#125; else if(ext.indexOf('.css') == 0 || ext.indexOf('.js') == 0 || ext.indexOf('.jpg') == 0 ) &#123; return; &#125; console.info('Requesting', ext, requestData.url); */ &#125;); await page.on('onConsoleMessage', function(msg) &#123; console.info('onConsoleMessage', msg); &#125;); await page.on('onError', function(msg) &#123; console.info('onError', msg); &#125;); const status = await page.open(URL); await new Promise(resolve =&gt; setTimeout(resolve, 3000)) // await page.includeJs('https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'); // await page.includeJs('http://static.danawa.com/globaljs/external/jquery/core/last/jquery-last.min.js?v=1901301728'); await page.evaluate(function() &#123; // $('span[price]').filter(function () &#123; // var data = $(this); // console.log(\"Price: \" + data.text()); // &#125;); &#125;); const content = await page.property('content'); console.log(content); await instance.exit();&#125;)();","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://thisisone.github.io/tags/node-js/"}]},{"title":"안드로이드 앱 용 keystore 만들기","slug":"keystore","date":"2019-02-03T03:18:55.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"keystore/","link":"","permalink":"http://thisisone.github.io/keystore/","excerpt":"","text":"명령어1keytool -genkey -v -keystore [파일명] -alias [앱이름] -keyalg RSA -keysize 2048 -validity [유효일] 삽질기 keytool 명령어가 keystore 인줄 잘못 봤음 keytool 은 jdk 에 있었음 (anroid sdk 에 있는 줄) 암호가 6자는 넘어야함 // :\\Java\\jdk1.8.0_191\\bin\\keytool -genkey -v -keystore dcapp.keystore -alias dcapp -keyalg RSA -keysize 2048 -validity 10000 PlayerSettings.Android.keystoreName = &quot;Assets/Editor/dcapp.keystore&quot;; PlayerSettings.Android.keystorePass = &quot;dcappkey&quot;; PlayerSettings.Android.keyaliasName = &quot;dcapp&quot;; PlayerSettings.Android.keyaliasPass = &quot;dcappkey&quot;;","categories":[{"name":"개발","slug":"개발","permalink":"http://thisisone.github.io/categories/개발/"}],"tags":[{"name":"안드로이드","slug":"안드로이드","permalink":"http://thisisone.github.io/tags/안드로이드/"}]},{"title":"hyper.is 사용법","slug":"hyper-is","date":"2019-01-16T12:15:02.000Z","updated":"2020-02-08T18:18:28.403Z","comments":true,"path":"hyper-is/","link":"","permalink":"http://thisisone.github.io/hyper-is/","excerpt":"","text":"커맨드창보다 뜨는게 좀 느리지만 장점도 있음 장점 복사 붙여넣기 가 편리함 창 크기를 자유롭게 조정 가능함 링크가 있다면 클릭 할 수 있다 폰트가 작아서 좀더 많이 볼 수 있다. 설치 &amp; 설정 hyper.is 에서 설치파일을 다운로드합니다. hyper 를 실행합니다. 플러그인을 커맨드 명령으로 설치한다.123$ hyper install hyperpower$ hyper install hyper-letters$ hyper install hyperborder hyperpower - 글자 칠때마다 폭발을한다. | hyper-letters - 입력하면 글자가 흘러내린다. hyperborder - 창틀의 테두리가 빨간색으로 바뀐다. (잘보임)","categories":[],"tags":[{"name":"hyper","slug":"hyper","permalink":"http://thisisone.github.io/tags/hyper/"},{"name":"app","slug":"app","permalink":"http://thisisone.github.io/tags/app/"}]}]}